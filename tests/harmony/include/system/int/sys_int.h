/*
 * This is the stub for sys_int.h used for the tests. It contains the bare
 * minimum required to implement the mock interrupt symbols.
 */

#ifndef TESTS_HARMONY_INCLUDE_SYSTEM_INT_SYS_INT_H_
#define TESTS_HARMONY_INCLUDE_SYSTEM_INT_SYS_INT_H_

#ifdef  __cplusplus
extern "C" {
#endif

typedef enum {
  INT_DISABLE_INTERRUPT = 0,
  INT_PRIORITY_LEVEL1 = 1,
  INT_PRIORITY_LEVEL2 = 2,
  INT_PRIORITY_LEVEL3 = 3,
  INT_PRIORITY_LEVEL4 = 4,
  INT_PRIORITY_LEVEL5 = 5,
  INT_PRIORITY_LEVEL6 = 6,
  INT_PRIORITY_LEVEL7 = 7
} INT_PRIORITY_LEVEL;

typedef enum {
  INT_SUBPRIORITY_LEVEL0 = 0x00,
  INT_SUBPRIORITY_LEVEL1 = 0x01,
  INT_SUBPRIORITY_LEVEL2 = 0x02,
  INT_SUBPRIORITY_LEVEL3 = 0x03
} INT_SUBPRIORITY_LEVEL;

typedef enum {
  INT_SOURCE_TIMER_CORE = 0,
  INT_SOURCE_SOFTWARE_0 = 1,
  INT_SOURCE_SOFTWARE_1 = 2,
  INT_SOURCE_EXTERNAL_0 = 3,
  INT_SOURCE_TIMER_1 = 4,
  INT_SOURCE_INPUT_CAPTURE_1_ERROR = 61,
  INT_SOURCE_INPUT_CAPTURE_1 = 5,
  INT_SOURCE_OUTPUT_COMPARE_1 = 6,
  INT_SOURCE_EXTERNAL_1 = 7,
  INT_SOURCE_TIMER_2 = 8,
  INT_SOURCE_INPUT_CAPTURE_2_ERROR = 62,
  INT_SOURCE_INPUT_CAPTURE_2 = 9,
  INT_SOURCE_OUTPUT_COMPARE_2 = 10,
  INT_SOURCE_EXTERNAL_2 = 11,
  INT_SOURCE_TIMER_3 = 12,
  INT_SOURCE_INPUT_CAPTURE_3_ERROR = 63,
  INT_SOURCE_INPUT_CAPTURE_3 = 13,
  INT_SOURCE_OUTPUT_COMPARE_3 = 14,
  INT_SOURCE_EXTERNAL_3 = 15,
  INT_SOURCE_TIMER_4 = 16,
  INT_SOURCE_INPUT_CAPTURE_4_ERROR = 64,
  INT_SOURCE_INPUT_CAPTURE_4 = 17,
  INT_SOURCE_OUTPUT_COMPARE_4 = 18,
  INT_SOURCE_EXTERNAL_4 = 19,
  INT_SOURCE_TIMER_5 = 20,
  INT_SOURCE_INPUT_CAPTURE_5_ERROR = 65,
  INT_SOURCE_INPUT_CAPTURE_5 = 21,
  INT_SOURCE_OUTPUT_COMPARE_5 = 22,
  INT_SOURCE_ADC_1 = 33,
  INT_SOURCE_SPI_1_ERROR = 23,
  INT_SOURCE_SPI_1_RECEIVE = 24,
  INT_SOURCE_SPI_1_TRANSMIT = 25,
  INT_SOURCE_USART_1_ERROR = 26,
  INT_SOURCE_USART_1_RECEIVE = 27,
  INT_SOURCE_USART_1_TRANSMIT = 28,
  INT_SOURCE_I2C_1_ERROR = 29,
  INT_SOURCE_I2C_1_SLAVE = 30,
  INT_SOURCE_I2C_1_MASTER = 31,
  INT_SOURCE_CHANGE_NOTICE = 32,
  INT_SOURCE_PARALLEL_PORT = 34,
  INT_SOURCE_PARALLEL_PORT_ERROR = 66,
  INT_SOURCE_COMPARATOR_1 = 35,
  INT_SOURCE_COMPARATOR_2 = 36,
  INT_SOURCE_USB_1 = 57,
  INT_SOURCE_DMA_0 = 48,
  INT_SOURCE_DMA_1 = 49,
  INT_SOURCE_DMA_2 = 50,
  INT_SOURCE_DMA_3 = 51,
  INT_SOURCE_DMA_4 = 52,
  INT_SOURCE_DMA_5 = 53,
  INT_SOURCE_DMA_6 = 54,
  INT_SOURCE_DMA_7 = 55,
  INT_SOURCE_SPI_2_ERROR = 37,
  INT_SOURCE_SPI_2_RECEIVE = 38,
  INT_SOURCE_SPI_2_TRANSMIT = 39,
  INT_SOURCE_USART_2_ERROR = 40,
  INT_SOURCE_USART_2_RECEIVE = 41,
  INT_SOURCE_USART_2_TRANSMIT = 42,
  INT_SOURCE_I2C_2_ERROR = 43,
  INT_SOURCE_I2C_2_SLAVE = 44,
  INT_SOURCE_I2C_2_MASTER = 45,
  INT_SOURCE_CAN_1 = 58,
  INT_SOURCE_CAN_2 = 59,
  INT_SOURCE_ETH_1 = 60,
  INT_SOURCE_SPI_3_ERROR = 26,
  INT_SOURCE_SPI_3_RECEIVE = 27,
  INT_SOURCE_SPI_3_TRANSMIT = 28,
  INT_SOURCE_USART_3_ERROR = 37,
  INT_SOURCE_USART_3_RECEIVE = 38,
  INT_SOURCE_USART_3_TRANSMIT = 39,
  INT_SOURCE_I2C_3_ERROR = 26,
  INT_SOURCE_I2C_3_SLAVE = 27,
  INT_SOURCE_I2C_3_MASTER = 28,
  INT_SOURCE_SPI_4_ERROR = 40,
  INT_SOURCE_SPI_4_RECEIVE = 41,
  INT_SOURCE_SPI_4_TRANSMIT = 42,
  INT_SOURCE_USART_4_ERROR = 67,
  INT_SOURCE_USART_4_RECEIVE = 68,
  INT_SOURCE_USART_4_TRANSMIT = 69,
  INT_SOURCE_I2C_4_ERROR = 37,
  INT_SOURCE_I2C_4_SLAVE = 38,
  INT_SOURCE_I2C_5_MASTER = 42,
  INT_SOURCE_USART_5_ERROR = 73,
  INT_SOURCE_USART_5_RECEIVE = 74,
  INT_SOURCE_USART_5_TRANSMIT = 75,
  INT_SOURCE_I2C_5_SLAVE = 41,
  INT_SOURCE_USART_6_ERROR = 70,
  INT_SOURCE_USART_6_RECEIVE = 71,
  INT_SOURCE_USART_6_TRANSMIT = 72,
  INT_SOURCE_CLOCK_MONITOR = 46,
  INT_SOURCE_RTCC = 47,
  INT_SOURCE_FLASH_CONTROL = 56,
  INT_SOURCE_I2C_4_MASTER = 39,
  INT_SOURCE_I2C_5_ERROR = 40
} INT_SOURCE;

typedef enum {
  INT_VECTOR_CT = 0x00,
  INT_VECTOR_CS0 = 0x08,
  INT_VECTOR_CS1 = 0x10,
  INT_VECTOR_INT0 = 0x18,
  INT_VECTOR_T1 = 0x20,
  INT_VECTOR_IC1 = 0x28,
  INT_VECTOR_OC1 = 0x30,
  INT_VECTOR_INT1 = 0x38,
  INT_VECTOR_T2 = 0x40,
  INT_VECTOR_IC2 = 0x48,
  INT_VECTOR_OC2 = 0x50,
  INT_VECTOR_INT2 = 0x58,
  INT_VECTOR_T3 = 0x60,
  INT_VECTOR_IC3 = 0x68,
  INT_VECTOR_OC3 = 0x70,
  INT_VECTOR_INT3 = 0x78,
  INT_VECTOR_T4 = 0x80,
  INT_VECTOR_IC4 = 0x88,
  INT_VECTOR_OC4 = 0x90,
  INT_VECTOR_INT4 = 0x98,
  INT_VECTOR_T5 = 0xA0,
  INT_VECTOR_IC5 = 0xA8,
  INT_VECTOR_OC5 = 0xB0,
  INT_VECTOR_PMP = 0xE0,
  INT_VECTOR_USB1 = 0x168,
  INT_VECTOR_RTCC = 0x118,
  INT_VECTOR_SPI1 = 0xB8,
  INT_VECTOR_UART1 = 0xC0,
  INT_VECTOR_SPI3 = 0xC0,
  INT_VECTOR_I2C3 = 0xC0,
  INT_VECTOR_I2C1 = 0xC8,
  INT_VECTOR_CN = 0xD0,
  INT_VECTOR_AD1 = 0xD8,
  INT_VECTOR_CMP1 = 0xE8,
  INT_VECTOR_CMP2 = 0xF0,
  INT_VECTOR_UART3 = 0xF8,
  INT_VECTOR_SPI2 = 0xF8,
  INT_VECTOR_I2C4 = 0xF8,
  INT_VECTOR_UART2 = 0x100,
  INT_VECTOR_SPI4 = 0x100,
  INT_VECTOR_I2C5 = 0x100,
  INT_VECTOR_I2C2 = 0X108,
  INT_VECTOR_FSCM = 0x110,
  INT_VECTOR_DMA0 = 0x120,
  INT_VECTOR_DMA1 = 0x128,
  INT_VECTOR_DMA2 = 0x130,
  INT_VECTOR_DMA3 = 0x138,
  INT_VECTOR_DMA4 = 0x140,
  INT_VECTOR_DMA5 = 0x148,
  INT_VECTOR_DMA6 = 0x150,
  INT_VECTOR_DMA7 = 0x158,
  INT_VECTOR_FCE = 0x160,
  INT_VECTOR_CAN1 = 0x170,
  INT_VECTOR_CAN2 = 0x178,
  INT_VECTOR_ETH = 0x180,
  INT_VECTOR_UART4 = 0x188,
  INT_VECTOR_UART6 = 0x190,
  INT_VECTOR_UART5 = 0x198
} INT_VECTOR;

bool SYS_INT_SourceStatusGet(INT_SOURCE source);

void SYS_INT_SourceStatusClear(INT_SOURCE source);

void SYS_INT_SourceEnable(INT_SOURCE source);

bool SYS_INT_SourceDisable(INT_SOURCE source);

void SYS_INT_VectorPrioritySet(INT_VECTOR vector, INT_PRIORITY_LEVEL priority);

void SYS_INT_VectorSubprioritySet(INT_VECTOR vector,
                                  INT_SUBPRIORITY_LEVEL subpriority);


#ifdef  __cplusplus
}
#endif

#endif  // TESTS_HARMONY_INCLUDE_SYSTEM_INT_SYS_INT_H_
